/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Digibank;

import Main.GUI.TransactionGUI;
import Main.GUI.TransactionGUIImpl;
import Main.GUI.TransactionTypeGUI;
import Main.GUI.TransactionTypeGUIImpl;
import Objects.PersonFilter;
import ejb.DtAccountsFacadeRemote;
import ejb.DtTransactionTypesFacadeRemote;
import ejb.DtTransactionsFacadeRemote;
import entities.DtTransactions;
import entities.DtTransactionTypes;
import entities.DtAccounts;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Juan David
 * The approach of this class is based on the real state agency design.
 */
public class Digibank extends JFrame implements ActionListener, ListSelectionListener {

    @EJB
    private static DtAccountsFacadeRemote dtAccountsFacade;

    @EJB
    private static DtTransactionTypesFacadeRemote dtTransactionTypesFacade;

    @EJB
    private static DtTransactionsFacadeRemote dtTransactionsFacade;

    private TransactionGUI gui;
    private TransactionTypeGUI guiType;

    private List<DtTransactions> ListTransaccions;
    private List<DtTransactionTypes> ListTypes;
    private List<DtAccounts> ListAcctUser;
    private final String activeUser = "JORTEGA";

    public List<DtTransactions> getListTransaccions() {
        return ListTransaccions;
    }

    public void setListTransaccions(List<DtTransactions> ListTransaccions) {
        this.ListTransaccions = ListTransaccions;
    }

    public List<DtTransactionTypes> getListTypes() {
        return ListTypes;
    }

    public void setListTypes(List<DtTransactionTypes> ListTypes) {
        this.ListTypes = ListTypes;
    }

    public List<DtAccounts> getListAcctUser() {
        return ListAcctUser;
    }

    public void setListAcctUser(List<DtAccounts> ListAcctUser) {
        this.ListAcctUser = ListAcctUser;
    }

    public Digibank() {
        super("DigiBank");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuTransactions = new javax.swing.JMenu();
        jMenuItemTransactions = new javax.swing.JMenuItem();
        jMenuGeneral = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(100, 100));
        setPreferredSize(new java.awt.Dimension(800, 600));

        jMenuTransactions.setText("Transactions");

        jMenuItemTransactions.setText("Manage Transactions");
        jMenuItemTransactions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTransactionsActionPerformed(evt);
            }
        });
        jMenuTransactions.add(jMenuItemTransactions);

        jMenuBar1.add(jMenuTransactions);

        jMenuGeneral.setText("General Settings");

        jMenuItem1.setText("Transactions Types");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuGeneral.add(jMenuItem1);

        jMenuBar1.add(jMenuGeneral);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemTransactionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTransactionsActionPerformed
        gui = new TransactionGUIImpl(this, this);
        findAllTransactions();
        findAllTransactionTypesWandD();
        findUserAcctNumbers();
    }//GEN-LAST:event_jMenuItemTransactionsActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        guiType = new TransactionTypeGUIImpl(this, this);
        findAllTransactionsTypes();
        guiType.fillMovementTypes();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Digibank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Digibank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Digibank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Digibank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Digibank().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuGeneral;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemTransactions;
    private javax.swing.JMenu jMenuTransactions;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent event) {
        if (event.getSource() == gui.getViewButton()) {
            this.findAllTransactions();
        } else if (event.getSource() == gui.getAddButton()) {
            this.addTransaction();
        } else if (event.getSource() == gui.getSearchButton()) {
            try {
                this.SearchTransaction();
            } catch (Exception ex) {
                Logger.getLogger(Digibank.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (event.getSource() == guiType.getViewTypeButton()) {
            this.findAllTransactionsTypes();
        } else if (event.getSource() == guiType.getAddButton()) {
            this.addTransactionType();
        } else if (event.getSource() == guiType.getUpdateButton()) {
            this.updateTransactionType();
        } else if (event.getSource() == guiType.getDeleteButton()) {
            this.deleteTransactionType();
        }

    }

    @Override
    public void valueChanged(ListSelectionEvent event) {
        if ((event.getSource() == this.guiType.getTypeTable().getSelectionModel())
                && (event.getValueIsAdjusting())) {
            try {
                if (this.guiType.isTypeSelected()) {
                    int TypeID = this.guiType.getSelectedTypeId();
                    short TypeIDshort = (short) TypeID;

                    DtTransactionTypes TypeIn = dtTransactionTypesFacade.findByID(TypeIDshort);
                    this.guiType.displaySelectedTypeDetails(TypeIn);
                }
            } catch (Exception e) {
                guiType.displayMessageInDialog(e.getMessage());
            }
        }
    }

    //Methods for Transactions
    public void findAllTransactions() {
        try {
            ListTransaccions = dtTransactionsFacade.findAll();

            if (ListTransaccions != null) {
                this.gui.fillTransactionsTable(ListTransaccions);
            }

        } catch (Exception ex) {
            this.gui.displayMessageInDialog("Failed to retrieve transactions: " + ex.getMessage());
        }
    }

    public void findAllTransactionTypesWandD() {
        try {
            ListTypes = dtTransactionTypesFacade.findWandD();

            if (ListTypes != null) {
                this.gui.fillTransactionTypes(ListTypes);
            }

        } catch (Exception ex) {
            this.gui.displayMessageInDialog("Failed to retrieve transaction types: " + ex.getMessage());
        }
    }

    public void findUserAcctNumbers() {
        try {
            ListAcctUser = dtAccountsFacade.FindByUserID(activeUser);

            if (ListAcctUser != null) {
                this.gui.fillAcctNumbers(ListAcctUser);
            }

        } catch (Exception ex) {
            this.gui.displayMessageInDialog("Failed to retrieve user accounts: " + ex.getMessage());
        }
    }

    public void addTransaction() {
        DtTransactions PersistDtTransaction = gui.getNewTransactionDetails();

        if (!PersistDtTransaction.toString().equals("null. null")) {
            try {
                dtTransactionsFacade.create(PersistDtTransaction);
                this.findAllTransactions();
                this.gui.clearTextFields();
            } catch (Exception ex) {
                this.gui.displayMessageInDialog("Failed to add transaction: " + ex.getMessage());
            }
        }
    }

    public void SearchTransaction() throws Exception {
        List<PersonFilter> ListIn = gui.getSearchParameters();
        int TransNoInt = 0;
        String TransName = "";
        short TransType = 0;

        int VarTransNo = 0;
        int VarTransName = 0;
        int VarTransType = 0;

        try {
            for (int x = 0; x < ListIn.size(); x++) {
                if (!ListIn.get(x).getFieldName().isEmpty()) {
                    if (null != ListIn.get(x).getFieldName()) {
                        switch (ListIn.get(x).getFieldName()) {
                            case "TransactionID":
                                TransNoInt = Integer.parseInt(ListIn.get(x).getFieldvalue());
                                break;
                            case "TransactionName":
                                TransName = ListIn.get(x).getFieldvalue();
                                break;
                            case "TransactionType":
                                TransType = Short.parseShort(ListIn.get(x).getFieldvalue());
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
        } catch (NumberFormatException e) {
            this.gui.displayMessageInDialog("Error during the searching: " + e.getMessage());
        }

        //Aplying logic to obtain numbers
        if (TransNoInt > 0) {
            VarTransNo = 1;
        }
        if (TransName.length() > 0) {
            VarTransName = 2;
        }
        if (TransType > 0) {
            VarTransType = 4;
        }

        //sum all number in a variable
        int validator = VarTransNo + VarTransName + VarTransType;

        //Choose the best path to retrieve data
        switch (validator) {
            case 0:
                System.out.print("Zero");
                ListTransaccions = dtTransactionsFacade.findAll();
                break;
            case 1:
                System.out.print("one");
                ListTransaccions = dtTransactionsFacade.searchTransactionByID(TransNoInt);
                break;
            case 2:
                System.out.print("two");
                ListTransaccions = dtTransactionsFacade.searchTransactionByName(TransName);
                break;
            case 3:
                System.out.print("three");
                ListTransaccions = dtTransactionsFacade.searchTransactionByIDandName(TransNoInt, TransName);
                break;
            case 4:
                System.out.print("four");
                ListTransaccions = dtTransactionsFacade.searchTransactionByType(TransType);
                break;
            case 5:
                System.out.print("five");
                ListTransaccions = dtTransactionsFacade.searchTransactionByIdandType(TransNoInt, TransType);
                break;
            case 6:
                System.out.print("six");
                ListTransaccions = dtTransactionsFacade.searchTransactionByNameandType(TransName, TransType);
                break;
            case 7:
                System.out.print("seven");
                ListTransaccions = dtTransactionsFacade.searchTransactionByIdandNameandType(TransNoInt, TransName, TransType);
                break;
        }

        try {
            if (ListTransaccions != null) {
                this.gui.fillTransactionsTable(ListTransaccions);
            }
        } catch (Exception ex) {
            this.gui.displayMessageInDialog("Failed to draw transactions: " + ex.getMessage());
        }
    }

    //Methods for TransactionsTypes
    public void findAllTransactionsTypes() {
        try {
            ListTypes = dtTransactionTypesFacade.findAll();

            if (ListTypes != null) {
                this.guiType.fillTransactionsTypesTable(ListTypes);
            }

        } catch (Exception ex) {
            this.gui.displayMessageInDialog("Failed to retrieve transactions types: " + ex.getMessage());
        }
    }

    public void addTransactionType() {
        DtTransactionTypes PersistDtTransactionTypes = guiType.getNewTransactionTypeDetails();
        if (!PersistDtTransactionTypes.toString().equals("null. null")) {
            try {
                dtTransactionTypesFacade.create(PersistDtTransactionTypes);
                this.findAllTransactionsTypes();
                this.guiType.clearTextFields();
            } catch (Exception ex) {
                this.gui.displayMessageInDialog("Failed to add transaction: " + ex.getMessage());
            }
        }
    }

    public void updateTransactionType() {
        DtTransactionTypes EditDtTransactionTypes = guiType.getCurrentTransactionTypeDetails();
        if (!EditDtTransactionTypes.toString().equals("null. null")) {

            try {
                dtTransactionTypesFacade.edit(EditDtTransactionTypes);
                this.findAllTransactionsTypes();
                this.guiType.clearTextFields();
            } catch (Exception ex) {
                this.gui.displayMessageInDialog("Failed to update property: " + ex.getMessage());
            }
        }
    }

    public void deleteTransactionType() {
        DtTransactionTypes DeleteDtTransactionTypes = guiType.getCurrentTransactionTypeDetails();
        if (!DeleteDtTransactionTypes.toString().equals("null. null")) {

            try {
                dtTransactionTypesFacade.remove(DeleteDtTransactionTypes);
                this.findAllTransactionsTypes();
            } catch (Exception ex) {
                this.gui.displayMessageInDialog("Failed to delete type: " + ex.getMessage());
            } 
        }
    }

}
